* Languages, and about languages, on the BEAM

** Overview

This document is intended to list (a) languages implemented to run on the BEAM, the Erlang virtual machine, and (b) documents (articles & presentations) about the hows and whys of writing languages to run on the BEAM.

For the moment, and for want of a better name, I call such languages "BEAM languages" (although I have heard that there are other Erlang VMs, ...).

I would like the document to be comprehensive, or at least "representative".  If I have missed a BEAM language, some noteworthy discussion about a BEAM language, or documentation about implementing languages targetting the BEAM, please let me know through the usual channels (issues, forks, PRs, tweets, emails, etc.).  

Thank you.

** Languages

Erlang itself, then the Lisp-influenced languages, then in alphabetical order.

*** erlang

- http://www.erlang.org/
- https://github.com/erlang/otp

*** joxa (2011+)

- http://joxa.org/
- https://github.com/joxa/joxa
- https://joxa.readthedocs.org/

**** Differences Between Joxa and LFE

- Eric Merritt
- 2012/02/21
- http://blog.ericbmerritt.com/2012/02/21/differences-between-joxa-and-lfe.html

**** Joxa: A Full Featured Lisp on the Erlang VM

- Eric Merritt
- 2012/08/22
- https://vimeo.com/49116180

*** lfe (2008+)

- http://lfe.io/
- https://github.com/rvirding/lfe

*** 'the concurrent schemer' (2013+)

- http://the-concurrent-schemer.github.io/scm-doc/
- https://github.com/the-concurrent-schemer/scm

*** clojerl (2015+)

clojerl - Clojure for the Erlang VM

- https://github.com/jfacorro/clojerl

*** alpaca (2016+)

- https://github.com/alpaca-lang/alpaca

*** efene (2009+)

- http://efene.org/
- https://github.com/efene/efene

*** elchemy (2017+)

An Elm syntax front-end for Elixir (i.e., converts Elm-style input language into Elixir source code).

- https://github.com/wende/elchemy

*** elixir (2011+)

- http://elixir-lang.org/
- https://github.com/elixir-lang/elixir

*** eml (2012)

"eml - Erlang flavored by Some ML"

- https://github.com/etnt/eml

*** ephp (2013+)

An erlang interpreter for PHP

- https://github.com/bragful/ephp

Presumably as used by [[https://bragful.com][Bragful]] --- "A resilient and scalable PHP".

*** erl2 (2012)

- https://github.com/joearms/erl2

- Announcement and ensuing discussion on erlang-questions ::
  http://erlang.org/pipermail/erlang-questions/2012-February/064687.html

- "A Few Improvements to Erlang" (EUC 2012) ::
  http://www.erlang-factory.com/conference/ErlangUserConference2012/speakers/joearmstrong

- A blog post about the above presentation in Chinese ::
  http://www.cnblogs.com/me-sa/archive/2012/06/06/2538941.html

*** erlog (2008+)

- https://github.com/rvirding/erlog

**** Backtracking in Erlang, part 1 - control

- Robert Virding
- 2009/03/18
- http://rvirding.blogspot.co.uk/2009/03/backtracking-in-erlang-part-1-control.html

*** erlyjs (2008-2013?)

The original repo (on Google Code) no longer exists, but there are several forks, e.g.:

- https://github.com/KlausTrainer/erlyjs

A couple of blog posts from 2008 (the second is by the original developer of erlyjs):

- ErlyJS: JavaScript on Erlang ::
  http://ajaxian.com/archives/erlyjs-javascript-on-erlang

- ErlyJS - translating Javascript to Erlang ::
  http://rsaccon.blogspot.co.uk/2008/02/erlyjs-translating-javascript-to-erlang.html

*** fez (2017+)

fez - fsharp to core erlang compiler experiment

- https://github.com/kjnilsson/fez

*** haskerl et al. (1993-2014?)

- https://github.com/etnt/Haskerl

- The Haskerl Index ::
  http://www.dcs.gla.ac.uk/~partain/haskerl.html

- Yhc/Erlang/Proof of concept ::
  https://wiki.haskell.org/Yhc/Erlang/Proof_of_concept

*** idris-erlang (2014-15)

- https://github.com/lenary/idris-erlang

This is an Idris package (therefore requiring Haskell and Idris) which compiles Idris source code into erlang source code.  

*** interfix (2015)

- https://github.com/marianoguerra/interfix

*** luerl (2012+)

- https://github.com/rvirding/luerl

*** purerl (2016+)

Erlang backend for PureScript

- https://github.com/purerl/purescript

- Introducing PureScript Erlang ::
  http://nwolverson.uk/devlog/2016/08/01/introducing-purescript-erlang.html

*** reia (-2011)

- http://reia-lang.org/
- https://github.com/tarcieri/reia

*** xerl (2013)

- https://github.com/extend/xerl

Five web articles in 2013 starting with:

- 2013/01/30 
- "Xerl: empty modules"
- http://ninenines.eu/articles/xerl-0.1-empty-modules/

** About Languages

*** Erlang, LFE, Joxa and Elixir: Established and Emerging Languages in the Erlang Ecosystem

(slides)
- Brian Troutwine
- 2014/07/23
- http://www.slideshare.net/BrianTroutwine1/erlang-lfe-elixir-and-joxa-oscon-2014

*** Implementing Languages on the BEAM (1)

(video)
- Robert Virding
- 2014/10/29 (London Erlang UG)
- https://www.youtube.com/watch?v=qm0mbQbc9Kc

*** Implementing Languages on the BEAM (2)

(slides & video)
- Robert Virding
- 2014/11/04 (Codemesh 2014)
- http://www.codemesh.io/codemesh2014/robert-virding

*** Create Your Own Language: How to implement a language on top of Erlang Virtual Machine (BEAM)

(slides)
- Hamidreza Soleimani
- 2015/08/06
- https://drive.google.com/file/d/0B9D6BzMBVYONR0ZzV3pTb3N4bms/view?pli=1

*** Eric Merritt, Erlang and distributed systems expert, gives his views on BEAM languages, Hindleyâ€“Milner type systems and new technologies

(article/interview, with links to podcast & video)

- Federico Carrone
- 2015/08/11
- https://medium.com/this-is-not-a-monad-tutorial/eric-merritt-erlang-and-distributed-systems-expert-gives-his-views-on-beam-languages-hindley-a09b15f53a2f

** Erlang and Types

These first two papers are linked from Philip Wadler's erlang page: http://homepages.inf.ed.ac.uk/wadler/topics/erlang.html

*** A practical subtyping system for Erlang

(paper)
- Simon Marlow & Philip Wadler 
- 1997
- http://homepages.inf.ed.ac.uk/wadler/papers/erlang/erlang.pdf

*** The great type hope

(slides)
- Philip Wadler
- 2002
- http://homepages.inf.ed.ac.uk/wadler/papers/erlang/erlang-slides.pdf

*** Om: Erlang System F-Omega (Erlang with Types Proposal)

- Namdak Tonpa
- 2013
- https://github.com/5HT/om

